//Given a string, your task is to determine the longest palindromic substring of the string. For example, the longest palindrome in aybabtu is bab.
//usei manacher
#include <bits/stdc++.h>
using namespace std;
#define int long long

void dbg_out() { cerr << endl; }
template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T){ cerr << ' ' << H; dbg_out(T...); }
#define dbg(...) cerr<<"(" << #__VA_ARGS__<<"):" , dbg_out(__VA_ARGS__) , cerr << endl

// Manacher
// Given a string s, computes p := manacher(s.data(), s.size()), where
// - p[0][i] = half length of even lenght palindrome centered around s[i], s[i+1] (par)
// - p[1][i] = half length of odd lenght palindrome centered around s[i] (impar)
// Source: http://codeforces.com/blog/entry/12143
// Time: O(N)
template<typename T>
array<vector<int>, 2> manacher(const T s[], int n) {
	using vi = vector<int>;
	array<vi, 2> p = {vi(n+1), vi(n)};
	for(int z: {0, 1}) for(int i=0,l=0,r=0; i < n; i++) {
		int t = r - i + !z;
		if(i < r)
			p[z][i] = min(t, p[z][l+t]);
		int pl = i - p[z][i], 
		    pr = i + p[z][i] - !z;
		while(pl > 0 && pr + 1 < n && s[pl-1] == s[pr+1])
			p[z][i]++, pl--, pr++;
		if(pr>r) 
			l = pl, r = pr;
	}
	p[0].erase(p[0].begin());
	p[0].pop_back();
	return p;
}


void solve(){
    string s;
    cin>>s;
    auto p = manacher(s.data(), s.size());
    int maximo=1;
    int guarda=-1;
    bool par = false;
    // p[0] = palíndromos de comprimento par
    // p[1] = palíndromos de comprimento ímpar
    for(int i=0; i<s.size(); i++){
        if(2*p[0][i] > maximo){
            // dbg(p[0][i], maximo, "par");
            maximo = 2*p[0][i];
            guarda = i;
            par=true;
        }
        if(2*p[1][i]+1 > maximo){
            // dbg(p[1][i], maximo, "impar");
            maximo = 2*p[1][i]+1;
            guarda = -i;
            par = false;
        }
    }
    if(maximo == 1){
        cout<<s[0]<<endl;
        return;
    }
    else{
        maximo = maximo/2;
        if(par){
            //tamanho par
            cout<<s.substr(guarda-maximo+1, maximo*2)<<endl;
        }
        else{
            //tamanho ímpar
            guarda = -guarda;
            cout<<s.substr(guarda-maximo, maximo*2+1)<<endl;
        }
    }
    
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    solve();
    return 0;
}
