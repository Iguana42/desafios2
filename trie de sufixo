Aniket loves strings and hence he keeps expanding his collection of strings. Harsh came up with an idea to tease Aniket. Harsh can ask Aniket to do one of the following operations to his collection of strings (Initially he has an empty collection).

Add: Add a given string to the collection.
Ask: Ask if there exists a group of k strings such that they have a common suffix of length l .
Removei: Remove the string that was added in the ith operation (if the string is not already removed). It is guaranteed that ith operation was an Add operation.

//trie de sufixo
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define endl '\n'

void dbg_out() { cerr << endl; }
template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T){ cerr << ' ' << H; dbg_out(T...); }
#define dbg(...) cerr<<"(" << #__VA_ARGS__<<"):" , dbg_out(__VA_ARGS__) , cerr << endl

int q;
//fazer com trie
struct TrieNode {
    unordered_map<char, TrieNode*> children;
    int count = 0;
};

class SuffixTrie {
    private:
        TrieNode* root;
        vector<string> strings;
        vector<bool> active;
    
    public:
        SuffixTrie() {
            root = new TrieNode();
        }
    
        //complexidade->soma do comprimento das string adicionadas
        // no caso 1e5
        void addString(const string& s) {
            strings.push_back(s);
            active.push_back(true);
            int idx = strings.size() - 1; //indice da string recem adicionada
            TrieNode* current = root;
            for (int i = s.length() - 1; i >= 0; --i) {
                char c = s[i];
                if (current->children.find(c) == current->children.end()) {
                    current->children[c] = new TrieNode();
                }
                current = current->children[c];
                current->count++; //quantidades de strings que passam por esse no
                //ai vamos fazer isso porque depois sabemos o maior comprimento do sufixo
            }
        }
    
        // complexidade de 1e5 tambem (soma dos comprimentos das string adicionadas)
        void removeString(int x) {
            strings.push_back("");
            active.push_back(false);
            // dbg(!active[x - 1],strings[x-1]);
            if (x < 1 || x > strings.size() || !active[x - 1]) return;
            // dbg(x,strings[x-1]);
            active[x - 1] = false;
            string s = strings[x - 1];
            TrieNode* current = root;
            for (int i = s.length() - 1; i >= 0; --i) {
                char c = s[i];
                current = current->children[c];
                current->count--;
            }
        }
    
        //mesma complexidade, passa por todos os vertices 1 vez entao e a soma dos comprimentos
        //das strings adicionadas;
        bool hasCommonSuffix(int k, int l) {
            strings.push_back("");
            active.push_back(false);
            stack<pair<TrieNode*, int>> stk; //pilha
            stk.push({root, 0});
            while (!stk.empty()) {
                auto [node, depth] = stk.top();
                stk.pop();
                if (depth == l) {
                    if (node->count >= k) return true;
                    continue;
                }
                for (auto& [c, child] : node->children) {
                    if (child->count >= k) {
                        stk.push({child, depth + 1});
                    }
                }
            }
            return false;
        }
    };

void solve(){
    cin>>q;
    SuffixTrie trie;
    for(int i=0;i<q;i++){
        int op;
        cin >> op;
        if (op == 1) {
            string s;
            cin >> s;
            trie.addString(s);
        } 
        else if (op == 2) {
            int k, l;
            cin >> k >> l;
            cout << (trie.hasCommonSuffix(k, l) ? "YES" : "NO") << endl;
        } 
        else if (op == 3) {
            int x;
            cin >> x;
            trie.removeString(x);
        }
    }
    
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    solve();
    return 0;
}
