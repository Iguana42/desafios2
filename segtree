#include <bits/stdc++.h>
using namespace std;
#define int long long
// #define endl '\n'
#define MAXP 32 
 
void dbg_out() { cerr << endl; }
template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T){ cerr << ' ' << H; dbg_out(T...); }
#define dbg(...) cerr<<"(" << #__VA_ARGS__<<"):" , dbg_out(__VA_ARGS__) , cerr << endl

int n,m;
vector<int>hotel;
vector<int>grupo;

//segtree tirada do caderno de segtree da unb
class  SegTree{
    vector<int> st;
    int size;

    int el_neutro = -(1e9 + 7);

    int f(int a, int b){
        return max(a,b);
    }

    int query(int sti, int stl, int str, int l, int r){
        if(str < l || r < stl)
            return el_neutro;


        if(stl >= l and str <= r)
            return st[sti];

        int mid = (str+stl)/2;

        return f(query(sti*2+1,stl,mid,l,r),query(sti*2+2,mid+1,str,l,r));
    }

    void update(int sti, int stl, int str, int i, int amm){
        if(stl == i and str == i){
            st[sti] += amm;
            return;
        }

        if(stl > i or str < i)
            return;
        int mid = (stl + str)/2;
        update(sti*2+1,stl,mid,i,amm);
        update(sti*2+2,mid+1,str,i,amm);
        st[sti] = f(st[sti*2+1],st[sti*2+2]);
    }


    public:
        SegTree(int n):  st(4*n,0){size = n;}
        int query(int l, int  r){return query(0,0,size-1,l,r);}
        void update(int i, int amm){update(0,0,size-1,i,amm);}
};


void solve(){
    cin>>n>>m;
    hotel.resize(n);
    grupo.resize(m);
    for(int i=0;i<n;i++){
        cin>>hotel[i];
    }
    // for(int i=0;i<m;i++){
    //     cin>>grupo[i];
    // }
    SegTree st(n);
    //construir a segtree
    for(int i = 0; i<n;i++){
        st.update(i,hotel[i]);
    }
    // dbg("passou1");
    for(int i=0;i<m;i++){
        //primeiro consulta
        int x;cin>>x;
        // dbg(x);
        // dbg("passou2");
        int sup=st.query(0,n-1);//total
        int lo=0;
        int hi=n-1;
        int sup2=sup;
        // int resp=sup;
        // dbg(st.query(2,1),"////");

        while(hi>lo){
            // dbg("passou3", x, sup, sup2, hi,lo);
            int mid=(hi-lo)/2+lo;
            // dbg(lo,hi,mid,sup,"antes");
            sup2=st.query(lo,mid);
            // else sup2=st.query(lo,lo)
            if(sup2<x){
                // if((hi-lo)/2==0)lo=(hi-lo)/2+lo+1;
                // else lo=(hi-lo)/2+lo;
                lo=mid+1;
                sup2=st.query(mid,hi);
            }
            else{
                hi=mid;
                // sup=sup2;
            } 
            if(sup2>=x)sup=sup2;
            // dbg(lo,hi,mid,sup);
        }
        // dbg("lower_bound",sup,lo);
        if(sup>=x){
            cout<<lo+1<<endl;
            // dbg(st.query(lo,lo),"...");
            st.update(lo,-x);
            // dbg(st.query(lo,lo));
        }
        else cout<<0<<endl;
        // for(int i=0;i<n;i++){
        //     cout<<st.query(i,i)<<" ";
        // }

        
    }
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    solve();
}
