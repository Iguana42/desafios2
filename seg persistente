You have an array of N integers, named Version-0 array. You need to do Q queries. There are 2 type of queries.

idx pos v: Take Version-idx array and copy it into another array. Name the new array Version-K array where K = (number of queries of 1st type before this query + 1). Then add v the element at index pos in Version-K array.
idx l r: In Version-idx array, sum the elements from index l to r. Print the sum of the range.
//usamos seg persistente

#include <bits/stdc++.h>
using namespace std;
// #define int double
// #define endl '\n'
#define all(x) x.begin(), x.end()

void dbg_out() { cerr << endl; }
template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T){ cerr << ' ' << H; dbg_out(T...); }
#define dbg(...) cerr<<"(" << #__VA_ARGS__<<"):" , dbg_out(__VA_ARGS__) , cerr << endl

// Persistent segment tree.
// 
// Complexity: 
//      Update - O(logn) memory and time
//      Query - O(logn) time
// Lazy works, but is very expensive. Every query will need O(logn) memory.

template<class T, int SZ> struct pseg {
    static const int LIMIT = 1e7; // adjust
    int nex;
    vector<int> l, r;
    vector<T> val, lazy;
    pseg () : l (LIMIT), r (LIMIT), val (LIMIT), nex (0) {}

    int copy(int cur) {
        int x = nex++;
        val[x] = val[cur], l[x] = l[cur], r[x] = r[cur]; // lazy[x] = lazy[cur];
        return x;
    }
    T comb(T a, T b) { 
        //merge de segmentos
        return a + b;
    }
    void pull(int x) { 
        //Updates a node's value from its children
        val[x] = comb (val[l[x]], val[r[x]]); 
    } 
//  void push(int cur, int L, int R) { 
//      if (!lazy[cur]) return;
//      if (L != R) {
//          l[cur] = copy(l[cur]);
//          val[l[cur]] += lazy[cur];
//          lazy[l[cur]] += lazy[cur];
//          
//          r[cur] = copy(r[cur]);
//          val[r[cur]] += lazy[cur];
//          lazy[r[cur]] += lazy[cur];
//      }
//      lazy[cur] = 0;
//  }
 
    //// MAIN FUNCTIONS
    T query(int cur, int lo, int hi, int L, int R) {  
        if (lo <= L && R <= hi) return val[cur];
        if (R < lo || hi < L) return T();
        int M = (L+R)/2;
        return comb(query(l[cur],lo,hi,L,M), query(r[cur],lo,hi,M+1,R));
    }
    int upd( int cur, int pos, T v, int L, int R) {
        if (R < pos || pos < L) return cur;

        int x = copy(cur);
        if (pos <= L && R <= pos) { val[x] += v; return x; }
        
        int M = (L+R)/2;
        l[x] = upd(l[x],pos,v,L,M), r[x] = upd(r[x],pos,v,M+1,R);
        pull(x); return x;
    }
    int build(vector<T>& arr, int L, int R) {
        int cur = nex++;
        if (L == R) {
            if (L < (int) arr.size ()) val[cur] = arr[L];
            else val[cur] = T();
            return cur;
        }

        int M = (L+R)/2;
        l[cur] = build(arr,L,M), r[cur] = build(arr,M+1,R);
        pull(cur); return cur;
    }

    void qual_versao_atualizar(int idx, int pos, int v, int k){
        int nova_raiz = upd(loc[idx], pos, v, 0, k-1);
        loc.push_back(nova_raiz);  
    }
    
    //// PUBLIC
    vector<int> loc;
    void upd(int idx, int pos, T v) {qual_versao_atualizar(idx, pos, v, SZ);}
    T query(int ti, int lo, int hi) { return query (loc[ti], lo, hi ,0 , SZ - 1); }
    void build(vector<T>& arr) { loc.push_back (build(arr, 0, SZ - 1)); }
};


void solve() {
	int n;
    cin >> n;
    vector<int > versao(n);
    for( int i = 0; i < n ; i++){
        cin >> versao[i];
    }
    const int N = 1e6;
    pseg<int, N> st; 
    st.build(versao);

    int q;
    cin >> q;
    
    for(int i = 0; i < q; i++){
        int a;
        cin >> a;
        if( a == 1){
            int idx, pos, v;
            cin >> idx >> pos >> v;
            pos--;
            st.upd(idx, pos,v);
        }
        else{
            int idx, l, r;
            cin >> idx >> l >> r;
            l--; r--;
            // dbg(l,r,idx);
            cout << st.query(idx,l,r) <<endl;

        }
    }


}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    // int t;
    // cin >> t;
    // while( t-- ){
        solve();
    // }
    return 0;
}



