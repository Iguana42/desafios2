In the country there are n cities and m bidirectional roads between them. Each city has an army. Army of the i-th city consists of ai soldiers. Now soldiers roam. After roaming each soldier has to either stay in his city or to go to the one of neighboring cities by at moving along at most one road.

Check if is it possible that after roaming there will be exactly bi soldiers in the i-th city.

#include <bits/stdc++.h>
using namespace std;
#define int long long
using ll = long long;
#define endl '\n'

void dbg_out() { cerr << endl; }
template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T){ cerr << ' ' << H; dbg_out(T...); }
#define dbg(...) cerr<<"(" << #__VA_ARGS__<<"):" , dbg_out(__VA_ARGS__) , cerr << endl

// https://github.com/kth-competitive-programming/kactl/blob/main/content/graph/Dinic.h
struct Dinic {
	struct edge {
		int to, rev;
		ll c, oc;
		ll flow() { return max(oc - c, 0LL); } // if you need flows
	};
	vector<int> lvl, ptr, q;
	vector<vector<edge>> adj;
	Dinic(int n) : lvl(n), ptr(n), q(n), adj(n) {}
	void add_edge(int a, int b, ll c, ll rcap = 0) {
		adj[a].push_back({b, (int) adj[b].size(), c, c});
		adj[b].push_back({a, (int) adj[a].size() - 1, rcap, rcap});
	}
	ll dfs(int v, int t, ll f) {
		if (v == t || !f) return f;
		for (int& i = ptr[v]; i < adj[v].size(); i++) {
			edge& e = adj[v][i];
			if (lvl[e.to] == lvl[v] + 1)
				if (ll p = dfs(e.to, t, min(f, e.c))) {
					e.c -= p, adj[e.to][e.rev].c += p;
					return p;
				}
		}
		return 0;
	}
	ll get_flow(int s, int t) {
		ll flow = 0; q[0] = s;
		for(int L=0; L < 31; L++) do { // 'int L=30' maybe faster for random data
			lvl = ptr = vector<int>(q.size());
			int qi = 0, qe = lvl[s] = 1;
			while (qi < qe && !lvl[t]) {
				int v = q[qi++];
				for (edge e : adj[v])
					if (!lvl[e.to] && e.c >> (30 - L))
						q[qe++] = e.to, lvl[e.to] = lvl[v] + 1;
			}
			while (ll p = dfs(s, t, LLONG_MAX)) flow += p;
		} while (lvl[t]);
		return flow;
	}
	bool left_of_min_cut(int a) { return lvl[a] != 0; }
};

void solve() {
    int n,m;
    const int INF = 1e10;
    cin >> n >> m;
	Dinic dinic(2*n +10); //n nos, n cidades etc
    int soma1 = 0, soma2 = 0;
    
    for(int i = 1; i <= n; i++){
        int a; cin >> a;
        dinic.add_edge(0, i, a); // 0 -> i (capacity a)
        dinic.add_edge(i, i + n, INF);
        soma1+=a;
    }
    for(int i = n + 1; i <= 2*n; i++){
        int b; cin >> b;
        dinic.add_edge(i, 2*n + 1, b);
        soma2+=b;
    }
    for(int i = 0; i < m; i++){
        int p,q;
        cin >> p >> q;
        dinic.add_edge(p, q + n, INF);
        dinic.add_edge(q, p + n, INF);
    }
    if(soma1 != soma2){
        cout << "NO" << endl;
        return;
    }
    ll max_flow = dinic.get_flow(0, 2*n +1); // Computes max flow from 0 to 3.
    if(max_flow != soma2){
        cout << "NO" << endl;
        return;
    }
    vector ans(n + 1, vector<int>(n + 1));
    cout << "YES" << endl;
    for(int i = 1; i <= n; i++) {
        for(auto edge: dinic.adj[i]){
            int cidade = edge.to; //cidade que esta apontando
            if(cidade > n){
                ans[i][cidade - n] = INF - edge.c; //fluxo entre i e cidade
            }
        }
    }

    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= n; j++) cout << ans[i][j] << " ";
        cout << "\n";
    }
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    solve();
    return 0;
}
