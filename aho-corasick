//Given a string and patterns, count for each pattern the number of positions where it appears in the string.

#include <bits/stdc++.h>
using namespace std;
#define int long long

void dbg_out() { cerr << endl; }
template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T){ cerr << ' ' << H; dbg_out(T...); }
#define dbg(...) cerr<<"(" << #__VA_ARGS__<<"):" , dbg_out(__VA_ARGS__) , cerr << endl

const int MAX = 1e6;
vector<string> palavras_terminadas[MAX];
// map<string, int> resp;
int contagem[MAX];

// Aho-corasick 
//
// query retorna o somatorio do numero de matches de
// todas as stringuinhas na stringona
//
// insert - O(|s| log(SIGMA))
// build - O(N), onde N = somatorio dos tamanhos das strings
// query - O(|s|)

//term[i]: número de padrões que terminam exatamente no nó i.
//sobe[i]: term[i] + padrões que terminam em nós alcançáveis por exit[i]
namespace aho {
	map<char, int> to[MAX];
	int link[MAX], idx, term[MAX], exit[MAX], sobe[MAX];

	void insert(string& s) {
		int at = 0;
		for (char c : s) {
			auto it = to[at].find(c);
			if (it == to[at].end()) at = to[at][c] = ++idx;
			else at = it->second;
		}
		term[at]++, sobe[at]++;
		palavras_terminadas[at].push_back(s);
	}
// #warning nao esquece de chamar build() depois de inserir
	void build() {
		queue<int> q;
		q.push(0);
		link[0] = exit[0] = -1;
		while (q.size()) {
			int i = q.front(); q.pop();
			for (auto [c, j] : to[i]) {
				int l = link[i];
				while (l != -1 and !to[l].count(c)) l = link[l];
				link[j] = l == -1 ? 0 : to[l][c];
				exit[j] = term[link[j]] ? link[j] : exit[link[j]];
				if (exit[j]+1) sobe[j] += sobe[exit[j]];
				q.push(j);
			}
		}
	}

int query(string& s) {
		int at = 0, ans = 0;
		for (char c : s){
			while (at != -1 and !to[at].count(c)) at = link[at];
			at = at == -1 ? 0 : to[at][c];
			ans += sobe[at];
		}
		return ans;
	}

	void process(const string& texto) {
		//texto e a palavra na qual vamos procurar os padroes
        int at = 0;
        for (char c : texto) {
            while (at != -1 && !to[at].count(c)) {
                at = link[at];
            }
            if (at == -1) {
                at = 0;
                continue;
            }
            at = to[at][c];
            
            // Contar todas as palavras que terminam aqui
            int temp = at;
            while (temp != -1) {
                if (term[temp]) {
                    contagem[temp]++;
                }
                temp = exit[temp];
            }
        }
    }

	int get_count(const string& palavra) {
        int at = 0;
        for (char c : palavra) {
            if (!to[at].count(c)) return 0;
            at = to[at][c];
        }
        return contagem[at];
    }


}

void solve(){
    string s;
	cin>>s;
	int k;cin>>k;
	vector<string>guarda(k);
	for(int i=0;i<k;i++){
		string prefix;
		cin>>prefix;
		guarda[i]=prefix;
		aho::insert(prefix);
	}
	aho::build();
	aho::process(s);
	for(auto t:guarda){
		cout<<aho::get_count(t)<<endl;
	}
    
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    solve();
    return 0;
}
